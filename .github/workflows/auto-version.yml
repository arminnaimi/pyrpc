name: Auto Version

on:
  push:
    branches:
      - main

jobs:
  auto-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml
          
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
      - name: Get commit messages
        id: get_commits
        run: |
          # Get commit messages since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --format=%s)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --format=%s)
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Determine version bump
        id: bump_type
        run: |
          python .github/scripts/determine_bump.py "${{ steps.get_commits.outputs.commits }}"
          
      - name: Bump version if needed
        if: steps.bump_type.outputs.should_bump == 'true'
        run: |
          python .github/scripts/bump_version.py ${{ steps.bump_type.outputs.bump_type }}
          
      - name: Get new version
        if: steps.bump_type.outputs.should_bump == 'true'
        id: get_version
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Commit and push changes
        if: steps.bump_type.outputs.should_bump == 'true'
        run: |
          git add pyproject.toml
          git commit -m "chore: bump version to v${{ steps.get_version.outputs.version }}"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push
          git push --tags 